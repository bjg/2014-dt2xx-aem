Core Programming Skills

Advanced Entry (DT211, DT228)

Brian Gillespie, School of Computing, DIT
Aug 2014

brian.x.gillespie@dit.ie

@__bjg
Hashtag: #ditae14

 
* Problem Set 2

* Guidelines for exercises in this module

- For these programming exercises, you are being asked to solve problems which require you to research concepts not necessarily already covered in class
- It is recommended that you review the learning resources listed at the end of the introductory lecture on Go programming
-  You are welcome to ask the instructor for help, but it is important that you try to find out the answers yourself before you do so. You may work with a class colleague if you wish
- When you do ask for help, try to outline everything you have thought about and tried up to that point. Your instructor is there to guide you

*Note:* These problems are just about small enough that you could use the [[http://play.golang.org/][Go Playground]] to code your solutions. If you prefer, you can install a copy of the Go Language on your laptop or lab desktop which is described in the [[https://playground.golang.org/doc/install][Go installation documentation]]

* Excercise #1

Suppose that you have been tasked with designing and implementing a calendar and diary utility in Go. For your program, you will need data structures to represent calendars and calendar entries.

- Create a unique namespace for your program objects
- Define a Go object for representing a calendar entry
- Define a Go object for representing a calendar. A calendar is a collection of calendar entries.

*Hint:* Open a calendar application like Google calendar to get ideas about the kinds of members your objects should have. Limit yourself to 5 at most. Remember that Go is a typed language so you should give thought to what types you will need

* Excercise #2

- Continuing with the calendar you started to develop in exercise #1, write accessor methods for your objects' members

*Hint:* Be careful to match your accessor methods' types with the object members

* Excercise #3

- Suppose that you have decided to wrap your new calendar utility as an web service. Describe an API that your calendar should support. In your answer, you do not need to provide code, but rather reflect on the high level operations you would choose

*Hint:* The API description is independent of any implementation details related to the internal workings of the calendar or any associated web technology
